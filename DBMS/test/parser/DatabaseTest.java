package parser;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import elements.Cell;
import elements.NumberCell;
import elements.Row;
import elements.StringCell;
import elements.Table;


/**
 * Tests Database.java
 *
 * @version 2
 *
 * @author Prajjwal Bhandari
 * @author Hardarshan Kahlon
 * @author Ansar Butt
 * @author Alvaro Naranjo
 *
 */

public class DatabaseTest {

	private static Database db = new Database();

	// Setting up "testTable" and "mixedTable"
	private static Table testTable, mixedTable;
	Row r1, r2, r3, r4, r5;
	Row mixedR1, mixedR2, mixedR3;

	// Setting up "forTestingLoad" file
	private static String test = "forTestingLoad";
	private static File file = new File(test);

	// Setting up "emptyFile" file
	private static String testEmpty = "emptyFile";
	private static File emptyFile = new File(testEmpty);

	// Backing up the System.out printstream just in case
	@SuppressWarnings("unused")
	private final PrintStream sysOut = System.out;
	private final ByteArrayOutputStream output = new ByteArrayOutputStream();

	/**
	 * @throws java.lang.Exception c
	 */
	@BeforeClass
	public static final void setUpBeforeClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception Autogenerated.
	 */
	@AfterClass
	public static final void tearDownAfterClass() throws Exception {
		// Delete created files after tests are finished.
		if (file.exists() && !file.isDirectory()) {
			file.delete();
		}
		if (emptyFile.exists() && !emptyFile.isDirectory()) {
			emptyFile.delete();
		}
	}

	/**
	 * @throws java.lang.Exception Autogenerated.
	 */
	@Before
	public final void setUp() throws Exception {
		testTable = new Table(Arrays.asList(false, false, false, false, false));

		// Make the Table that is to be tested
		r1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("4"), new StringCell("11"),
				new StringCell("4"), new StringCell("cat"),
				new StringCell("duke"))));
		r2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("doodoo"), new StringCell("369"),
				new StringCell("677"), new StringCell("fine"),
				new StringCell("prajj"))));
		r3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("hello"), new StringCell(""),
				new StringCell("99"), new StringCell("6667"),
				new StringCell("nope"))));
		r4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("55"), new StringCell("2323"),
				new StringCell("8522"), new StringCell("8090"),
				new StringCell("obama"))));
		r5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("harmen"), new StringCell("ansar"),
				new StringCell("144"), new StringCell("alvaro"),
				new StringCell("smita"))));

		testTable.add(r1);
		testTable.add(r2);
		testTable.add(r3);
		testTable.add(r4);
		testTable.add(r5);

		//Make a 3x2 mixed cell table without header for load tests
		mixedTable = new Table(Arrays.asList(false, true));

		mixedR1 = new Row(Arrays.asList(
				new StringCell("a"), new NumberCell(0)));
		mixedR2 = new Row(Arrays.asList(
				new StringCell("b"), new NumberCell(1)));
		mixedR3 = new Row(Arrays.asList(
				new StringCell("c"), new NumberCell(2)));

		mixedTable.add(mixedR1);
		mixedTable.add(mixedR2);
		mixedTable.add(mixedR3);

		// Add test tables to Database
		db.add("table1", testTable);
		db.add("nulltable", null);

		//XXX setOut
		System.setOut(new PrintStream(output));
	}

	/**
	 * @throws java.lang.Exception Autogenerated.
	 */
	@After
	public final void tearDown() throws Exception {
		db.clear();
		output.reset();
	}

	/**
	 * Test method for Database#add(String, parser.Table). No
	 * specific Case
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test
	public final void testAddAndGet() throws NoSuchTableException {
		// checking that the addition on setUp() was successful
		// and the .get() does what it's supposed to
		assertEquals(testTable, db.getTable("table1"));
	}

	/**
	 * Test method for Database#add(String, parser.Table). case:
	 * table doesn't exist
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testGet_inValidTable() throws NoSuchTableException {
		// a non existent Table should return null
		assertEquals(null, db.getTable("someRandomNonExistantTable"));
	}

	/**
	 * Test method for Database#print(String). case: the given
	 * tableName exists
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test
	public final void testPrint_TableExists() throws NoSuchTableException {
		// testing that a valid Table, i.e. one in the Database, prints properly
		db.print("table1");
		// trim removes the trailing newLine from ByteArrayOutputStream
		assertEquals("4,11,4,cat,duke\ndoodoo,369,677,fine,prajj\n"
				+ "hello,,99,6667,nope\n55,2323,8522,8090,obama\n"
				+ "harmen,ansar,144,alvaro,smita", output.toString().trim());
	}

	/**
	 * Test method for Database#print(String).
	 *
	 * case: the given tableName doesn't exist.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 *
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testPrint_TableDoesNotExist()
			throws NoSuchTableException {
		// Testing that a Table not in the Database prints out a custom err msg
		db.print("someRandomTable");
		assertEquals("Cannot find someRandomTable.", output.toString().trim());
	}

	/**
	 * Test method for Database#save(String, String).
	 *
	 * case: valid table name, valid saveTo File
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test
	public final void testSave_allValid() throws NoSuchTableException {

		File save = new File("validSave.tmp");

		// cleaning up
		save.deleteOnExit();
		// force save to be writeable
		save.setWritable(true);

		db.save("table1", "validSave.tmp");

		// checking that the file was created can can be written to
		assertTrue(save.exists());
		assertTrue(save.canWrite());

		// Testing that the content is all the same
		String s = "";
		try {
			Scanner sc = new Scanner(save);
			while (sc.hasNext()) { // formatting
				s += sc.nextLine() + "\n";
			}
			sc.close();
		} catch (FileNotFoundException e) {
			fail("File " + save.getName() + " not found");
		}

		assertEquals(db.getTable("table1").toString(), s);
	}

	/**
	 * Test method for Database#save(String, String).
	 *
	 * case: invalid table name
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testSave_tableInValid() throws NoSuchTableException {
		// saving a non-existent Table, should send the error message
		db.save("table3", "InValidSave.tmp");

		// check that proper output was printed to System.out
		assertEquals("There is no such table table3", output.toString().trim());

		// making sure that the file wasn't written to.
		assertFalse(new File("InValidSave.tmp").exists());
	}

	/**
	 * Test method for Database#save(String, String).
	 *
	 * case: trivial, saveTo File cannot be saved to
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test
	public final void testSave_fileNotWriteable() throws NoSuchTableException {

		try {
			File save = File.createTempFile("NonReadableTestFile", "tmp");

			// cleaning up
			save.deleteOnExit();

			// try saving to a file that cannot be written to
			save.setWritable(false);

			// ensuring that the file was created cannot be written to
			assertTrue(save.exists());
			assertFalse(save.canWrite());

			db.save("table1", save.toString());
			assertEquals("The file " + save.toString()
					+ " cannot be written to.", output.toString().trim());
		} catch (IOException e) {
			// ensuring that test will fail if file preconditions aren't met
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail("IOException");
		}

	}

	/**
	 * Test method for Database#clear() case: no specific case
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testClear() throws NoSuchTableException {
		db.clear();

		// check if the table1, added at the @Before method, is still there
		// should throw a NoSuchTableException
		db.getTable("table1");
	}

	/**
	 * Test method for Database#orderBy(String)
	 *
	 * case: trivial, valid tableName, valid column number
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testOrderBy_tableExistsValidColumn()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {

		Table sortedTable = new Table(testTable.getDefinition());
		sortedTable.add(r3.clone());
		sortedTable.add(r4.clone());
		sortedTable.add(r5.clone());
		sortedTable.add(r1.clone());
		sortedTable.add(r2.clone());

		assertEquals(sortedTable, db.orderBy("table1, 3"));
		assertFalse(sortedTable.equals(testTable)); // non-destruction check

	}

	/**
	 * Test method for Database#orderBy(String)
	 *
	 * case: valid tableName, Invalid column number
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testOrderBy_tableExistsInValidColumn()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {

		db.orderBy("table1, 10100000");
	}

	/**
	 * Test method for Database#orderBy(String)
	 *
	 * case: Invalid tableName
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testOrderBy_InValidTable() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {

		db.clear(); //mkae sure there is nothing here
		db.add("table1", testTable); // add a table with a different name
		//check
		db.orderBy("UnSortedTable, 10100000");
	}

	/**
	 * Test method for Database#orderBy(String)
	 *
	 * case: trivial, valid tableName, valid header name is given
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testOrderBy_tableExistsValidHeader()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {

		Table sortedTable = new Table(testTable.getDefinition());

		//add a header
		List<String> header = new ArrayList<String>();
		for (int i = 0; i < testTable.getColSize(); i++) {
			header.add(i + "head");
		}

		sortedTable.add(r3.clone());
		sortedTable.add(r4.clone());
		sortedTable.add(r5.clone());
		sortedTable.add(r1.clone());
		sortedTable.add(r2.clone());

		testTable.setHeader(header);
		sortedTable.setHeader(header);

		assertEquals(sortedTable, db.orderBy("table1, 3head"));
		assertFalse(sortedTable.equals(testTable)); // non-destruction check

	}

	/**
	 * Test method for Database#orderBy(String)
	 *
	 * case: trivial, valid tableName, valid column number
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testOrderBy_tableExistsInvalidHeader()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {
		//add a header
		List<String> header = new ArrayList<String>();
		for (int i = 0; i < testTable.getColSize(); i++) {
			header.add(i + "head");
		}
		testTable.setHeader(header);

		db.orderBy("table1,asdsafsdfsdfasdfadf");
	}

	/**
	 * Test method for Database#define(String[])
	 * @throws NoSuchTableException if the table asked for does not exist.
	 */
	@Test
	public final void testDefine() throws NoSuchTableException {
		//try defining a table that doesn't exist
		db.define(new String[]{"define", "newTable", "String", "Int"});
		assertEquals(Arrays.asList(false, true),
				db.getTable("newTable").getDefinition());

		//try re-defining a table that exists
		db.define(new String[]{"define", "newTable", "Int", "Int"});
		assertEquals(Arrays.asList(true, true),
				db.getTable("newTable").getDefinition());
	}

	// Test cases for method load in Database.java START here:
	/**
	 * Test method for Database#load(java.lang.String).
	 * Test a table previously defined without header is properly loaded.
	 */
	@Test
	public final void testLoadValidTableNoHeader() {

		try {
			// Creating and writing onto file "forTestingLoad"
			BufferedWriter bwTest = new BufferedWriter(new FileWriter(file));
			bwTest.write(mixedTable.toString());
			bwTest.close();

			//load assumes define stores a table under a key in database
			db.add("mixedTableKey", new Table(mixedTable.getDefinition()));

			//check load returns true & assigns correct value to mixedTableKey
			db.load(false, "mixedTableKey", "forTestingLoad");
			assertEquals(mixedTable, db.getTable("mixedTableKey"));

		} catch (IOException e) {
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail(e.getClass().toString());
		} catch (NoSuchTableException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Test method for Database#load(java.lang.String).
	 * test a table previously defined with header is properly loaded.
	 */
	@Test
	public final void testLoadValidTableWithHeader() {
		//Set a header for mixedTable
		mixedTable.setHeader(
				new ArrayList<String>(Arrays.asList("col1", "col2")));

		try {
			// Creating and writing onto file "forTestingLoad"
			BufferedWriter bwTest = new BufferedWriter(new FileWriter(file));
			bwTest.write(mixedTable.toString());
			bwTest.close();

			//load assumes define stores a table under a key in database
			db.add("mixedTableKey", new Table(mixedTable.getDefinition()));

			//check load returns true & assigns correct value to mixedTableKey
			db.load(true, "mixedTableKey", "forTestingLoad");
			assertEquals(mixedTable, db.getTable("mixedTableKey"));

		} catch (IOException e) {
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail(e.getClass().toString());
		} catch (NoSuchTableException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Test method for Database#load(java.lang.String).
	 * @throws NoSuchTableException
	 * test a missing tableName causes NoSuchTableException.
	 */
	@Test (expected = NoSuchTableException.class)
	public final void testLoadUndefinedTableName() throws NoSuchTableException {

		try {
			// Creating and writing onto file "forTestingLoad"
			// testing undefined tableName so still need valid file to load
			BufferedWriter bwTest = new BufferedWriter(new FileWriter(file));
			bwTest.write(mixedTable.toString());
			bwTest.close();

			//check load throws exception for tableName not found in database
			db.load(false, "notDefined", "forTestingLoad");

		} catch (IOException e) {
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail(e.getClass().toString());
		} catch (NoSuchTableException e) {
			throw new NoSuchTableException(null);
		}
	}

	/**
	 * Test method for Database#load(java.lang.String).
	 * @throws NoSuchTableException
	 * test a loading null causes NoSuchTableException.
	 */
	@Test (expected = NoSuchTableException.class)
	public final void testLoadNullTable() throws NoSuchTableException {

		try {
			// Creating and writing onto file "forTestingLoad"
			// testing loading null so still need valid file to load
			BufferedWriter bwTest = new BufferedWriter(new FileWriter(file));
			bwTest.write(mixedTable.toString());
			bwTest.close();

			//check load throws exception for null table found in database
			//nulltable already added to database db.
			db.load(false, "nulltable", "forTestingLoad");

		} catch (IOException e) {
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail(e.getClass().toString());
		} catch (NoSuchTableException e) {
			throw new NoSuchTableException(null);
		}
	}

	/**
	 * Test method for Database#load(java.lang.String).
	 * test load does nothing when loading a table mismatching its definition.
	 */
	@Test
	public final void testLoadTableNotFollowingDefinition() {

		try {
			// Creating and writing onto file "forTestingLoad"
			BufferedWriter bwTest = new BufferedWriter(new FileWriter(file));
			bwTest.write(mixedTable.toString());
			bwTest.close();

			//load assumes define stores a table under a key in database
			//make different definition that what will be loaded
			List<Boolean> conflictingDef;
			conflictingDef = new ArrayList<Boolean>(Arrays.asList(true, true));
			db.add("mixedTableKey", new Table(conflictingDef));

			//check load does not change value of mixedTableKey in db
			db.load(false, "mixedTableKey", "forTestingLoad");
			assertEquals(new Table(conflictingDef),
					db.getTable("mixedTableKey"));

		} catch (IOException e) {
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail(e.getClass().toString());
		} catch (NoSuchTableException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Test method for Database#load(java.lang.String).
	 * test load assigns an empty table for a table defined without header.
	 */
	@Test
	public final void testLoadEmptyFileNoHeader() {

		try {
			// Creating empty file "emptyFile"
			BufferedWriter bwTest = new BufferedWriter(
					new FileWriter(emptyFile));
			bwTest.close();

			//load assumes define stores a table under a key in database
			db.add("mixedTableKey", new Table(mixedTable.getDefinition()));

			//check load assigns an empty Table for mixedTableKey in db
			db.load(false, "mixedTableKey", "emptyFile");
			assertEquals(new Table(mixedTable.getDefinition()),
					db.getTable("mixedTableKey"));

		} catch (IOException e) {
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail(e.getClass().toString());
		} catch (NoSuchTableException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Test method for Database#load(java.lang.String).
	 * test load assigns an empty table for a tableName defined with header.
	 */
	@Test
	public final void testLoadEmptyFileWithHeader() {

		try {
			// Creating empty file "emptyFile"
			BufferedWriter bwTest = new BufferedWriter(
					new FileWriter(emptyFile));
			bwTest.close();

			//load assumes define stores a table under a key in database
			db.add("mixedTableKey", new Table(mixedTable.getDefinition()));

			//check load assigns an empty Table ignoring that table has header
			db.load(true, "mixedTableKey", "emptyFile");
			assertEquals(new Table(mixedTable.getDefinition()),
					db.getTable("mixedTableKey"));

		} catch (IOException e) {
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail(e.getClass().toString());
		} catch (NoSuchTableException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Test method for Database#load(java.lang.String).
	 * test load does nothing when finding no file.
	 */
	@Test
	public final void testLoadFileNotFound() {

		try {
			//load assumes define stores a table under a key in database
			db.add("mixedTableKey", new Table(mixedTable.getDefinition()));

			//check load does not change value of mixedTableKey in db
			db.load(false, "mixedTableKey", "fileNotFound");
			assertEquals(new Table(mixedTable.getDefinition()),
					db.getTable("mixedTableKey"));

		} catch (IOException e) {
			Logger.getLogger(DatabaseTest.class.getName()).log(Level.SEVERE,
					null, e);
			fail(e.getClass().toString());
		} catch (NoSuchTableException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Test method for Database#product(java.lang.String). case:
	 * the product of two identically sized tables, both of which have headers
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test
	public final void testProduct_SameSizes() throws NoSuchTableException {

		Table testTable2 = new Table(Arrays.asList(false));
		Table testTable3 = new Table(Arrays.asList(false));

		testTable2.setHeader(Arrays.asList("first"));
		testTable3.setHeader(Arrays.asList("second"));

		testTable2.add(new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("a")))));
		testTable2.add(new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("b")))));

		testTable3.add(new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("1")))));
		testTable3.add(new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("2")))));

		db.add("testTable2", testTable2);
		db.add("testTable3", testTable3);

		ArrayList<Boolean> expectedDefinition = new ArrayList<Boolean>();
		expectedDefinition.addAll(testTable2.getDefinition());
		expectedDefinition.addAll(testTable3.getDefinition());

		Table expectedResultTable = new Table(expectedDefinition);
		expectedResultTable.setHeader(Arrays.asList("second",
				"first"));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("1"), new StringCell("a"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("1"), new StringCell("b"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("2"), new StringCell("a"))));
		Row expectedRow4 = new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("2"), new StringCell("b"))));

		// add the expected rows of the cartesian product to expectedResultTable
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		expectedResultTable.add(expectedRow4);

		// create a table that uses the product function to compute the result
		Table actualResultTable = db.product("testTable3, testTable2");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#product(java.lang.String). case:
	 * the product of two different size tables and the tables do not have
	 * headers.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test
	public final void testProduct_DifferentSizes() throws NoSuchTableException {

		Table testTable3 = new Table(Arrays.asList(false));

		testTable3.add(new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("1")))));
		testTable3.add(new Row(new ArrayList<Cell>(
				Arrays.asList(new StringCell("2")))));

		db.add("testTable3", testTable3);

		ArrayList<Boolean> expectedDefinition = new ArrayList<Boolean>();
		expectedDefinition.addAll(testTable.getDefinition());
		expectedDefinition.addAll(testTable3.getDefinition());

		Table expectedResultTable = new Table(expectedDefinition);

		// create the expected rows for the result table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("1"), new StringCell("4"), new StringCell("11"),
				new StringCell("4"), new StringCell("cat"),
				new StringCell("duke"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("1"), new StringCell("doodoo"),
				new StringCell("369"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("1"), new StringCell("hello"),
				new StringCell(""),	new StringCell("99"),
				new StringCell("6667"),	new StringCell("nope"))));
		Row expectedRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("1"), new StringCell("55"),
				new StringCell("2323"), new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row expectedRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("1"), new StringCell("harmen"),
				new StringCell("ansar"), new StringCell("144"),
				new StringCell("alvaro"), new StringCell("smita"))));
		Row expectedRow6 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("2"), new StringCell("4"),
				new StringCell("11"), new StringCell("4"),
				new StringCell("cat"), new StringCell("duke"))));
		Row expectedRow7 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("2"), new StringCell("doodoo"),
				new StringCell("369"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));
		Row expectedRow8 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("2"), new StringCell("hello"),
				new StringCell(""), new StringCell("99"),
				new StringCell("6667"), new StringCell("nope"))));
		Row expectedRow9 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("2"), new StringCell("55"),
				new StringCell("2323"),	new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row expectedRow10 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("2"), new StringCell("harmen"),
				new StringCell("ansar"), new StringCell("144"),
				new StringCell("alvaro"), new StringCell("smita"))));

		// add the expected rows of the cartesian product to expectedResultTable
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		expectedResultTable.add(expectedRow4);
		expectedResultTable.add(expectedRow5);
		expectedResultTable.add(expectedRow6);
		expectedResultTable.add(expectedRow7);
		expectedResultTable.add(expectedRow8);
		expectedResultTable.add(expectedRow9);
		expectedResultTable.add(expectedRow10);

		// create a table that uses the product function to compute the result
		Table actualResultTable = db.product("testTable3, table1");

		assertEquals(expectedResultTable, actualResultTable);
	}


	/**
	 * Test method for Database#product(String). case: product of
	 * two tables, one of which is empty
	 *
	 * @throws NoSuchTableException if Table can't be found
	 */
	@Test
	public final void testProduct_EmptyTable() throws NoSuchTableException {

		// create an empty table
		Table testTable5 = new Table(new ArrayList<Boolean>());

		db.add("testTable5", testTable5);

		// create a table that uses buildProduct function to compute result
		Table actualResultTable = db.product("testTable5,table1");

		assertEquals(testTable, actualResultTable);
	}


	/**
	 * Test method for Database#join(java.lang.String). case: the
	 * integer pair list consists of several pairs and neither of the tables
	 * have headers.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testJoin_MultiplePair() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, false, false,
				false, false, false, false, false));

		// initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, false, false));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"))));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"), new StringCell("4"),
				new StringCell("11"), new StringCell("4"),
				new StringCell("cat"), new StringCell("duke"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"), new StringCell("55"),
				new StringCell("2323"), new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"), new StringCell("doodoo"),
				new StringCell("369"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));

		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);

		// add the test table to the database
		db.add("testTable4", testTable4);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.join("testTable4,table1," + "2,0,1,1");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#join(java.lang.String). case: the
	 * name pair list consists of several pairs both tables must have headers.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testJoin_MultiplePairByColName()
			throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, false, false,
				false, false, false, false, false));

		// Initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, false, false));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"))));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"), new StringCell("4"),
				new StringCell("11"), new StringCell("4"),
				new StringCell("cat"), new StringCell("duke"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"), new StringCell("55"),
				new StringCell("2323"), new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"), new StringCell("doodoo"),
				new StringCell("369"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));

		// add the test rows and header to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);
		testTable4.setHeader(Arrays.asList("zero", "one", "two"));

		// add the expected rows and header to the expected result table
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		testTable4.setHeader(Arrays.asList("zero", "one", "two", "three",
				"four", "five", "six", "seven"));

		// add the test table to the database
		db.add("testTable4", testTable4);

		// add header to table1
		testTable.setHeader(Arrays.asList("zero", "one", "two", "three",
				"four"));

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.join("testTable4,table1,"
				+ "two,zero,one,one");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#outerJoin(java.lang.String). case: the
	 * integer pair list consists of several pairs and neither of the tables
	 * have headers.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testOuterJoin_MultiplePair() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, false, false,
				false, false, false, false, false));

		// Initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, false, false));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"))));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"), new StringCell("4"),
				new StringCell("11"), new StringCell("4"),
				new StringCell("cat"), new StringCell("duke"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"), new StringCell("55"),
				new StringCell("2323"), new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"), new StringCell("doodoo"),
				new StringCell("369"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));
		Row expectedRow4 = new Row(new ArrayList<Cell>((Arrays.asList(
				new StringCell(null), new StringCell(null),
				new StringCell(null), new StringCell("hello"),
				new StringCell(""), new StringCell("99"),
				new StringCell("6667"), new StringCell("nope")))));
		Row expectedRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell(null), new StringCell(null),
				new StringCell(null), new StringCell("harmen"),
				new StringCell("ansar"), new StringCell("144"),
				new StringCell("alvaro"), new StringCell("smita"))));


		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		expectedResultTable.add(expectedRow4);
		expectedResultTable.add(expectedRow5);

		// add the test table to the database
		db.add("testTable4", testTable4);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.outerJoin("testTable4,table1,"
				+ "2,0,1,1");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#outerJoin(java.lang.String). case: the
	 * column name pair list consists of several pairs.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column name is out of
	 * bounds
	 */
	@Test
	public final void testOuterJoin_MultiplePairByColName()
			throws NoSuchTableException,
			ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, false, false,
				false, false, false, false, false));

		// Initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, false, false));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"))));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"), new StringCell("4"),
				new StringCell("11"), new StringCell("4"),
				new StringCell("cat"), new StringCell("duke"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"), new StringCell("55"),
				new StringCell("2323"), new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"), new StringCell("doodoo"),
				new StringCell("369"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));
		Row expectedRow4 = new Row(new ArrayList<Cell>((Arrays.asList(
				new StringCell(null), new StringCell(null),
				new StringCell(null), new StringCell("hello"),
				new StringCell(""), new StringCell("99"),
				new StringCell("6667"), new StringCell("nope")))));
		Row expectedRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell(null), new StringCell(null),
				new StringCell(null), new StringCell("harmen"),
				new StringCell("ansar"), new StringCell("144"),
				new StringCell("alvaro"), new StringCell("smita"))));


		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		expectedResultTable.add(expectedRow4);
		expectedResultTable.add(expectedRow5);

		// add the test table to the database
		db.add("testTable4", testTable4);

		//add headers
		expectedResultTable.setHeader(Arrays.asList(new String[] {"zero", "one",
													"two", "zero", "one",
													"two", "three", "four"}));
		testTable4.setHeader(Arrays.asList(new String[] {"zero", "one",
											"two"}));
		testTable.setHeader(Arrays.asList(new String[] {"zero", "one",
											"two", "three", "four"}));

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.outerJoin("testTable4,table1,"
												+ "two,zero,one,one");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#addEmptyCells(java.lang.String). case:
	 * the cells to be added are of different types.
	 */
	@Test
	public final void testAddEmptyCells() {

		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new StringCell("55"))));

		Table testTable4 = new Table(Arrays.asList(false, true, false));

		testTable4.add(testRow1);

		Row expectedRow = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell(null), new NumberCell((Integer) null),
				new StringCell(null))));

		//convert table rows to ArrayList
		Row actualRow = db.addEmptyCells(testTable4);

		assertEquals(actualRow, expectedRow);
	}

	/**
	 * Test method for Database#addEmptyCellRows(java.lang.String). case:
	 * there are two tables that have varying cell types
	 */
	@Test
	public final void testAddEmptyCellRows() {

		Table expectedResultTable = new Table(Arrays.asList(false, true, false,
				false, true, false));

		Table joinTable = new Table(Arrays.asList(false, true, false,
				false, true, false));

		// Initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, true, false));
		Table testTable5 = new Table(Arrays.asList(false, true, false));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new NumberCell(11),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new NumberCell(369),
				new StringCell("doodoo"))));
		Row testRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("b"), new NumberCell(11),
				new StringCell("5"))));
		Row testRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("f"), new NumberCell(2323),
				new StringCell("56"))));
		Row testRow6 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("h"), new NumberCell(370),
				new StringCell("woowoo"))));


		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new NumberCell(11),
				new StringCell("4"), new StringCell("b"),
				new NumberCell(11), new StringCell("5"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new StringCell("55"), new StringCell("f"),
				new NumberCell(2323), new StringCell("56"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new NumberCell(369),
				new StringCell("doodoo"), new StringCell(null),
				new NumberCell((Integer) null), new StringCell(null))));
		Row expectedRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell(null), new NumberCell((Integer) null),
				new StringCell(null), new StringCell("h"),
				new NumberCell(370), new StringCell("woowoo"))));


		ArrayList<Row> table1Rows = new ArrayList<Row>();
		ArrayList<Row> table2Rows = new ArrayList<Row>();

		table1Rows.add(testRow3);
		table2Rows.add(testRow6);

		joinTable.add(expectedRow1);
		joinTable.add(expectedRow2);

		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);
		testTable5.add(testRow4);
		testTable5.add(testRow5);
		testTable5.add(testRow6);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		expectedResultTable.add(expectedRow4);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.addEmptyCellRows(testTable4,
				testTable5, joinTable, table1Rows, table2Rows);

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#outerJoinCreate(java.lang.String). case: the
	 * integer pair list consists of several pairs and neither of the tables
	 * have headers.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testOuterJoinCreate() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, false, false,
				false, false, false, false, false));

		// Initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, false, false));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"))));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"), new StringCell("4"),
				new StringCell("11"), new StringCell("4"),
				new StringCell("cat"), new StringCell("duke"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"), new StringCell("55"),
				new StringCell("2323"), new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"), new StringCell("doodoo"),
				new StringCell("369"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));
		Row expectedRow4 = new Row(new ArrayList<Cell>((Arrays.asList(
				new StringCell(null), new StringCell(null),
				new StringCell(null), new StringCell("hello"),
				new StringCell(""), new StringCell("99"),
				new StringCell("6667"), new StringCell("nope")))));
		Row expectedRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell(null), new StringCell(null),
				new StringCell(null), new StringCell("harmen"),
				new StringCell("ansar"), new StringCell("144"),
				new StringCell("alvaro"), new StringCell("smita"))));

		List<Integer> intPairs = Arrays.asList(2, 0, 1, 1);

		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		expectedResultTable.add(expectedRow4);
		expectedResultTable.add(expectedRow5);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.outerJoinCreate(testTable4, testTable,
				intPairs);

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#outerJoin(java.lang.String). case: the
	 * tables have various definitions
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testOuterJoin_DifferentDefinitions()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, true, false,
				false, true, false));

		// Initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, true, false));
		Table testTable5 = new Table(Arrays.asList(false, true, false));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new NumberCell(11),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new NumberCell(369),
				new StringCell("doodoo"))));
		Row testRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("b"), new NumberCell(11),
				new StringCell("5"))));
		Row testRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("f"), new NumberCell(2323),
				new StringCell("56"))));
		Row testRow6 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("h"), new NumberCell(370),
				new StringCell("woowoo"))));


		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new NumberCell(11),
				new StringCell("4"), new StringCell("b"), new NumberCell(11),
				new StringCell("5"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new StringCell("55"), new StringCell("f"),
				new NumberCell(2323), new StringCell("56"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new NumberCell(369),
				new StringCell("doodoo"), new StringCell(null),
				new NumberCell((Integer) null), new StringCell(null))));
		Row expectedRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell(null), new NumberCell((Integer) null),
				new StringCell(null), new StringCell("h"), new NumberCell(370),
				new StringCell("woowoo"))));


		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);
		testTable5.add(testRow4);
		testTable5.add(testRow5);
		testTable5.add(testRow6);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		expectedResultTable.add(expectedRow4);

		// add the test table to the database
		db.add("testTable4", testTable4);
		db.add("testTable5", testTable5);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.outerJoin("testTable4,testTable5,"
				+ "1,1");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#outerJoin(java.lang.String). case: the
	 * tables have various definitions
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column name is out of
	 * bounds
	 */
	@Test
	public final void testOuterJoin_DifferentDefinitionsByColName()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, true, false,
				false, true, false));

		// Initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, true, false));
		Table testTable5 = new Table(Arrays.asList(false, true, false));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new NumberCell(11),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new NumberCell(369),
				new StringCell("doodoo"))));
		Row testRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("b"), new NumberCell(11),
				new StringCell("5"))));
		Row testRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("f"), new NumberCell(2323),
				new StringCell("56"))));
		Row testRow6 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("h"), new NumberCell(370),
				new StringCell("woowoo"))));


		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new NumberCell(11),
				new StringCell("4"), new StringCell("b"), new NumberCell(11),
				new StringCell("5"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new StringCell("55"), new StringCell("f"),
				new NumberCell(2323), new StringCell("56"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new NumberCell(369),
				new StringCell("doodoo"), new StringCell(null),
				new NumberCell((Integer) null), new StringCell(null))));
		Row expectedRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell(null), new NumberCell((Integer) null),
				new StringCell(null), new StringCell("h"), new NumberCell(370),
				new StringCell("woowoo"))));


		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);
		testTable5.add(testRow4);
		testTable5.add(testRow5);
		testTable5.add(testRow6);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);
		expectedResultTable.add(expectedRow4);

		// add the test table to the database
		db.add("testTable4", testTable4);
		db.add("testTable5", testTable5);

		// set headers
		testTable4.setHeader(Arrays.asList("zero", "one", "two"));
		testTable5.setHeader(Arrays.asList("zero", "one", "two"));
		expectedResultTable.setHeader(Arrays.asList("zero", "one", "two",
				"zero", "one", "two"));

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.outerJoin("testTable4,testTable5,"
				+ "one,one");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#join(java.lang.String). case: the tables to be
	 * joined have different column definitions
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testJoin_MultipleDefinitions()
			throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, true, true,
				false, false, true));

		// initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, true, true));
		Table testTable5 = new Table(Arrays.asList(false, false, true));

		// create the rows for the test tables
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new NumberCell(11),
				new NumberCell(4))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new NumberCell(55))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new NumberCell(369),
				new NumberCell(22))));

		Row testRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("b"), new StringCell("11"),
				new NumberCell(4))));
		Row testRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new NumberCell(55))));
		Row testRow6 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("h"), new StringCell("369"),
				new NumberCell(22))));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new NumberCell(55), new StringCell("e"),
				new StringCell("2323"), new NumberCell(55))));

		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);
		testTable5.add(testRow4);
		testTable5.add(testRow5);
		testTable5.add(testRow6);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);

		// add the test table to the database
		db.add("testTable4", testTable4);
		db.add("testTable5", testTable5);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.join("testTable4,testTable5," + "0,0,2,2");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#join(java.lang.String). case: the tables to be
	 * joined have different column definitions
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testJoin_MultipleDefinitionsByColName()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, true, true,
				false, false, true));

		// initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, true, true));
		Table testTable5 = new Table(Arrays.asList(false, false, true));

		// create the rows for the test tables
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new NumberCell(11),
				new NumberCell(4))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new NumberCell(55))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new NumberCell(369),
				new NumberCell(22))));

		Row testRow4 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("b"), new StringCell("11"),
				new NumberCell(4))));
		Row testRow5 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new NumberCell(55))));
		Row testRow6 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("h"), new StringCell("369"),
				new NumberCell(22))));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new NumberCell(2323),
				new NumberCell(55), new StringCell("e"),
				new StringCell("2323"), new NumberCell(55))));

		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);
		testTable5.add(testRow4);
		testTable5.add(testRow5);
		testTable5.add(testRow6);

		// add the expected rows to the expected result table
		expectedResultTable.add(expectedRow1);

		//set headers
		testTable4.setHeader(Arrays.asList("zero", "one", "two"));
		testTable5.setHeader(Arrays.asList("zero", "one", "two"));
		expectedResultTable.setHeader(Arrays.asList("zero", "one", "two",
				"zero", "one", "two"));

		// add the test table to the database
		db.add("testTable4", testTable4);
		db.add("testTable5", testTable5);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.join("testTable4,testTable5,"
				+ "zero,zero,two,two");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#naturalJoin(java.lang.String). case: the tables
	 * to be joined have many headers that are the same
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testNaturalJoin_MultipleSameHeaders() throws
	NoSuchTableException, ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(Arrays.asList(false, false, false,
				false, false, false, false, false));

		// initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, false, false));

		testTable4.setHeader(Arrays.asList("Name", "Number1", "Number2"));
		testTable.setHeader(Arrays.asList(
				"Number2", "Number1", "Test2", "Test3", "Test4"));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"))));

		// create the rows for the expected table
		Row expectedRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"), new StringCell("4"),
				new StringCell("11"), new StringCell("4"),
				new StringCell("cat"), new StringCell("duke"))));
		Row expectedRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"), new StringCell("55"),
				new StringCell("2323"), new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row expectedRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"), new StringCell("doodoo"),
				new StringCell("369"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));

		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);

		// add the expected rows to the expected result table
		expectedResultTable.setHeader(Arrays.asList(
				"Name", "Number1", "Number2", "Number2", "Number1",
				"Test2", "Test3", "Test4"));
		expectedResultTable.add(expectedRow1);
		expectedResultTable.add(expectedRow2);
		expectedResultTable.add(expectedRow3);

		// add the test table to the database
		db.add("testTable4", testTable4);

		// create a table that uses the join function to compute the result
		Table resultTable = db.naturalJoin("testTable4,table1", false);

		assertEquals(expectedResultTable.getHeader(), resultTable.getHeader());
		assertEquals(expectedResultTable, resultTable);

	}

	/**
	 * Test method for Database#naturalJoin(java.lang.String). case: the tables
	 * to be joined have no headers that are the same
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testNaturalJoin_NoSameHeaders() throws
	NoSuchTableException, ColumnIndexOutOfBoundsException {

		Table expectedResultTable = new Table(new ArrayList<Boolean>());

		// initialize test tables
		Table testTable4 = new Table(Arrays.asList(false, false, false));

		testTable4.setHeader(new ArrayList<String>(Arrays.asList(
				"Name", "Number1", "Number2")));
		testTable.setHeader(new ArrayList<String>(Arrays.asList(
				"Test1", "Test2", "Test3", "Test4", "Test5")));

		// create the rows for the test table
		Row testRow1 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("11"),
				new StringCell("4"))));
		Row testRow2 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("e"), new StringCell("2323"),
				new StringCell("55"))));
		Row testRow3 = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("g"), new StringCell("369"),
				new StringCell("doodoo"))));


		// add the test rows to the test table
		testTable4.add(testRow1);
		testTable4.add(testRow2);
		testTable4.add(testRow3);

		// add the test table to the database
		db.add("testTable4", testTable4);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.naturalJoin("testTable4,table1", false);

		assertEquals(expectedResultTable, actualResultTable);

	}

	/**
	 * Test method for Database#join(String). case: one of the
	 * tables is empty
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testJoin_EmptyTable() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table expectedResultTable = new Table(new ArrayList<Boolean>());

		// initialize test tables
		Table testTable4 = new Table(new ArrayList<Boolean>());

		// add the table to the database
		db.add("testTable4", testTable4);

		// create a table that uses the join function to compute the result
		Table actualResultTable = db.join("testTable4,table1,1,2");

		assertEquals(expectedResultTable, actualResultTable);
	}

	/**
	 * Test method for Database#join(java.lang.String). case: The
	 * column to be compared is out of range.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testJoin_InvalidColumn() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table testTable2 = new Table(Arrays.asList(false));

		testTable2.add(new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a")))));
		testTable2.add(new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a")))));
		db.add("testTable2", testTable2);

		// Column with index 22 does not exist in "testTable2"
		db.join("table1,testTable2, 1, 22");
	}

	/**
	 * Test method for Database#join(java.lang.String). case: The
	 * column to be compared is out of range. Call with column name.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testJoin_InvalidColumnByColName()
			throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table testTable2 = new Table(Arrays.asList(false));

		testTable2.add(new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a")))));
		testTable2.add(new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a")))));
		db.add("testTable2", testTable2);

		// set headers for column name comparison
		testTable2.setHeader(Arrays.asList("zero"));
		testTable.setHeader(Arrays.asList("zero", "one",
				"two", "three", "four"));

		// Column with index 22 does not exist in "testTable2"
		db.join("table1,testTable2, one, twentytwo");
	}

	/**
	 * Test method for Database#join(java.lang.String). case: The
	 * table being operated on is null. Use column indices.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testJoin_TestNullTable() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		// "nulltable" maps to null.
		db.rows("nulltable, table1, 1, 1");
	}

	/**
	 * Test method for Database#join(java.lang.String). case: The
	 * table being operated on is null. Use column names.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testJoin_TestNullTableByColName()
			throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		// "nulltable" maps to null.
		db.rows("nulltable, table1, one, one");
	}

	/**
	 * Test method for
	 * Database#joinCheck(parser.Row, parser.Row, int[]). case:
	 * integer list consists of only a single pair
	 *
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testJoin_CheckSinglePair()
			throws ColumnIndexOutOfBoundsException {

		// create test rows to compare
		Row testRow1 = (new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("4"),
				new StringCell("d")))));
		Row testRow2 = (new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("c"), new StringCell("8522"),
				new StringCell("d")))));

		// initialize lists of integer pair
		List<Integer> intPairs1 = Arrays.asList(0, 1);
		List<Integer> intPairs2 = Arrays.asList(2, 2);

		assertFalse(db.joinCheck(testRow1, testRow2, intPairs1));
		assertTrue(db.joinCheck(testRow1, testRow2, intPairs2));
	}

	/**
	 * Test method for
	 * Database#joinCheck(parser.Row, parser.Row, int[]). case:
	 * integer list consists of multiple integer pairs
	 *
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testJoin_CheckMultiplePair()
			throws ColumnIndexOutOfBoundsException {

		// create test rows to compare
		Row testRow1 = (new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("a"), new StringCell("8522"),
				new StringCell("c")))));
		Row testRow2 = (new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("8522"), new StringCell("a"),
				new StringCell("d")))));

		// initialize lists of integer pair
		List<Integer> intPairs1 = Arrays.asList(1, 0, 0, 1);
		List<Integer> intPairs2 = Arrays.asList(1, 0, 2, 2);

		assertFalse(db.joinCheck(testRow1, testRow2, intPairs2));
		assertTrue(db.joinCheck(testRow1, testRow2, intPairs1));
	}

	/**
	 * Test method for Database#columns(java.lang.String). case:
	 * The Table being operated on is null.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testColumns_NullTable() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		// "nulltable" maps to null
		db.columns("nulltable, 1, 2");
	}

	/**
	 * Test method for Database#columns(java.lang.String). case:
	 * An out of range column index is specified.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testColumns_InvalidColumn() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		// Column with index 7 does not exist in "table1"
		db.columns("table1, 0, 4, 7");

	}

	/**
	 * Test method for Database#columns(java.lang.String). case:
	 * One column from the original Table is not kept.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 *
	 */
	@Test
	public final void testColumns_RemoveOneColumn() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table expectedResultTable = new Table(Arrays.asList(
				false, false, false, false));
		Row r1a = new Row(new ArrayList<Cell>(Arrays.asList(new StringCell("4"),
				new StringCell("4"), new StringCell("cat"),
				new StringCell("duke"))));
		Row r2a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("doodoo"), new StringCell("677"),
				new StringCell("fine"), new StringCell("prajj"))));
		Row r3a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("hello"), new StringCell("99"),
				new StringCell("6667"), new StringCell("nope"))));
		Row r4a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("55"), new StringCell("8522"),
				new StringCell("8090"), new StringCell("obama"))));
		Row r5a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("harmen"), new StringCell("144"),
				new StringCell("alvaro"), new StringCell("smita"))));

		expectedResultTable.add(r1a);
		expectedResultTable.add(r2a);
		expectedResultTable.add(r3a);
		expectedResultTable.add(r4a);
		expectedResultTable.add(r5a);

		// Keep 1st, 3rd, 4th and 5th columns; remove 2nd column
		Table amendedFinalTable = db.columns("table1,0,2,3,4");

		assertEquals(expectedResultTable, amendedFinalTable);
	}

	/**
	 * Test method for Database#columns(java.lang.String). case:
	 * Multiple columns from the original Table are not kept.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testColumns_RemoveMultipleColumns()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {
		Table expectedResultTable = new Table(Arrays.asList(false, false));

		Row r1a = new Row(new ArrayList<Cell>(Arrays.asList(new StringCell("4"),
				new StringCell("duke"))));
		Row r2a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("doodoo"), new StringCell("prajj"))));
		Row r3a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("hello"), new StringCell("nope"))));
		Row r4a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("55"), new StringCell("obama"))));
		Row r5a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("harmen"), new StringCell("smita"))));
		expectedResultTable.add(r1a);
		expectedResultTable.add(r2a);
		expectedResultTable.add(r3a);
		expectedResultTable.add(r4a);
		expectedResultTable.add(r5a);

		// Remove 2nd, 3rd and 4th columns; keep 1st and 5th columns
		Table amendedFinalTable = db.columns("table1,0,4");

		assertEquals(expectedResultTable, amendedFinalTable);
	}

	/**
	 * Test method for Database#columns(java.lang.String). case:
	 * No columns from the original Table are kept.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testColumns_RemoveAll() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table expectedResultTable = new Table(new ArrayList<Boolean>());

		// Don't keep any columns
		Table amendedFinalTable = db.columns("table1");

		assertEquals(expectedResultTable, amendedFinalTable);
	}

	/**
	 * Test method for Database#columns(java.lang.String). case:
	 * All columns are specified to be kept.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testColumns_KeepAll() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table expectedResultTable = new Table(testTable.getDefinition());

		expectedResultTable.add(r1.clone());
		expectedResultTable.add(r2.clone());
		expectedResultTable.add(r3.clone());
		expectedResultTable.add(r4.clone());
		expectedResultTable.add(r5.clone());

		// Keep all five columns; remove none
		Table amendedFinalTable = db.columns("table1,0,1,2,3,4");

		assertEquals(expectedResultTable, amendedFinalTable);
	}

	/**
	 * Test method for Database#columnsCheck(String).
	 *
	 * case: a string expression containing a list of integers is inputted
	 * @throws NoSuchTableException if the table doesn't exist
	 * @throws ColumnIndexOutOfBoundsException  if the column does not exist
	 *
	 */
	@Test
	public final void testColumnsCheck_ints()
			throws NoSuchTableException, ColumnIndexOutOfBoundsException {
		Table expectedResultTable = new Table(Arrays.asList(false, false));

		Row r1a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("4"), new StringCell("duke"))));
		Row r2a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("doodoo"),
				new StringCell("prajj"))));
		Row r3a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("hello"), new StringCell("nope"))));
		Row r4a = new Row(new ArrayList<Cell>(Arrays.asList(
				new StringCell("55"), new StringCell("obama"))));
		Row r5a = new Row(new ArrayList<Cell>(Arrays.asList(new
				StringCell("harmen"), new StringCell("smita"))));
		expectedResultTable.add(r1a);
		expectedResultTable.add(r2a);
		expectedResultTable.add(r3a);
		expectedResultTable.add(r4a);
		expectedResultTable.add(r5a);

		// Remove 2nd, 3rd and 4th columns; keep 1st and 5th columns
		//columnsCheck is called and if it works, it sends the expression
		//to the columns method
		Table amendedFinalTable = db.columnsCheck("table1,0,4");

		assertEquals(expectedResultTable, amendedFinalTable);
	}

	/**
	 * Test method for Database#rows(java.lang.String). case: The
	 * less-than comparator is specified.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testRows_LessThan() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table t = new Table(Arrays.asList(false, true),
				Arrays.asList("Foo", "Bar"));
		t.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pyl"), new NumberCell(6666))));
		t.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6669))));

		db.add("rowTest1", t);

		Table expectedResultTable = new Table(t.getDefinition(), t.getHeader());
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		//Try with NumberCells
		assertEquals(expectedResultTable, db.rows("rowTest1,1,<,6000"));

		//clear the table
		expectedResultTable = new Table(t.getDefinition(), t.getHeader());
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6669))));
		//Try with StringCells
		assertEquals(expectedResultTable, db.rows("rowTest1,0,<,pol"));
	}

	/**
	 * Test method for Database#rows(java.lang.String). case: The
	 * greater-than comparator is specified.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testRows_GreaterThan() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table t = new Table(Arrays.asList(false, true));
		t.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pyl"), new NumberCell(6666))));
		t.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6669))));

		db.add("rowTest1", t);

		Table expectedResultTable = new Table(t.getDefinition());
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pyl"), new NumberCell(6666))));
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6669))));
		//Try with NumberCells
		assertEquals(expectedResultTable, db.rows("rowTest1,1,>,6000"));

		expectedResultTable = new Table(t.getDefinition()); //clear this table
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pyl"), new NumberCell(6666))));
		//Try with StringCells
		assertEquals(expectedResultTable, db.rows("rowTest1,0,>,pol"));
	}

	/**
	 * Test method for Database#rows(java.lang.String). case: The
	 * equal-to comparator is specified.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testRows_EqualEqual() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table t = new Table(Arrays.asList(false, true));
		t.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pyl"), new NumberCell(6666))));
		t.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6669))));

		db.add("rowTest1", t);

		Table expectedResultTable = new Table(t.getDefinition());
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6000))));

		//Try with NumberCells
		assertEquals(expectedResultTable, db.rows("rowTest1,1,=,6000"));

		//Try with StringCells
		assertEquals(expectedResultTable, db.rows("rowTest1,0,=,pol"));
	}

	/**
	 * Test method for Database#rows(java.lang.String). case: The
	 * less-than-or-equal-to comparator is specified.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testRows_LessThanEqualTo() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table t = new Table(Arrays.asList(false, true));
		t.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pyl"), new NumberCell(6666))));
		t.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6669))));

		db.add("rowTest1", t);

		Table expectedResultTable = new Table(t.getDefinition());
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6000))));

		//Try with NumberCells
		assertEquals(expectedResultTable, db.rows("rowTest1,1,<=,6000"));

		expectedResultTable = new Table(t.getDefinition()); //clear this table
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6000))));
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6669))));
		//Try with StringCells
		assertEquals(expectedResultTable, db.rows("rowTest1,0,<=,pol"));
	}

	/**
	 * Test method for Database#rows(java.lang.String). case: The
	 * greater-than-or-equal-to comparator is specified.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testRows_GreaterThanEqualTo() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table t = new Table(Arrays.asList(false, true));
		t.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6666))));

		db.add("rowTest1", t);

		Table expectedResultTable = new Table(t.getDefinition());
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6000))));
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6666))));

		//Try with NumberCells
		assertEquals(expectedResultTable, db.rows("rowTest1,1,>=,6000"));

		expectedResultTable = new Table(t.getDefinition()); //clear this table
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		expectedResultTable.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6666))));
		//Try with StringCells
		assertEquals(expectedResultTable, db.rows("rowTest1,0,>=,pol"));
	}

	/**
	 * Test method for Database#rows(java.lang.String). case:
	 * None of the rows' specified column satisfies the condition.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test
	public final void testRows_ReturnEmptyTable() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table t = new Table(Arrays.asList(false, true));
		t.add(new Row(Arrays.asList(
				new StringCell("pzl"), new NumberCell(5000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pal"), new NumberCell(6000))));
		t.add(new Row(Arrays.asList(
				new StringCell("pol"), new NumberCell(6666))));

		db.add("rowTest1", t);

		Table emptyTable = new Table(t.getDefinition());

		//The following commands should all return empty tables

		//Try with NumberCells
		assertEquals(emptyTable, db.rows("rowTest1,1,<=,4999"));
		assertEquals(emptyTable, db.rows("rowTest1,1,==,6777"));
		assertEquals(emptyTable, db.rows("rowTest1,1,>=,6777"));

		//Try with StringCells
		assertEquals(emptyTable, db.rows("rowTest1,0,<=,cil"));
		assertEquals(emptyTable, db.rows("rowTest1,0,==,pil"));
		assertEquals(emptyTable, db.rows("rowTest1,0,>=,zil"));
	}

	/**
	 * Test method for Database#rows(java.lang.String). case: The
	 * table being operated on is null.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testRows_TestNullTable() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		// "nulltable" maps to null.
		db.rows("nulltable, 2, <, 55");
	}

	/**
	 * Test method for Database#rows(java.lang.String). case: The
	 * column to be compared is out of range.
	 *
	 * @throws NoSuchTableException if Table can't be found
	 * @throws ColumnIndexOutOfBoundsException if given column number is out of
	 * bounds
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testRows_InvalidColumn() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		// Column with index 7 does not exist in "table1"
		db.rows("table1, 7, >, 22");
	}

	/**
	 * Test method for Database#rowsCheck(String).
	 *
	 * case: a string expression referencing a column by its index is inputted
	 * @throws NoSuchTableException if the table doesn't exist
	 * @throws ColumnIndexOutOfBoundsException  if the column does not exist
	 *
	 */
	@Test
	public final void testRowsCheck_ints() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		Table expectedResultTable = new Table(testTable.getDefinition());
		testTable.setHeader(Arrays.asList("a", "b", "c", "d", "e"));
		expectedResultTable.setHeader(Arrays.asList("a", "b", "c", "d", "e"));

		expectedResultTable.add(r1.clone());
		expectedResultTable.add(r2.clone());
		expectedResultTable.add(r4.clone());
		expectedResultTable.add(r5.clone());

		// Keep rows whose 4th column contents are greater or equal to "8090"
		//rowsCheck is called and if it works, it sends the expression
		//to the rows method
		assertEquals(expectedResultTable, db.rowsCheck("table1,3,>=,8090"));
		//test it out with a column header
		assertEquals(expectedResultTable, db.rowsCheck("table1,d,>=,8090"));
	}

	/**
	 * Test method for Database#rowsCheck(String).
	 *
	 * case: given column Header is not valid
	 * @throws NoSuchTableException if the table doesn't exist
	 * @throws ColumnIndexOutOfBoundsException  if the column does not exist
	 *
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testRowsCheck_InvalidHeader() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		//controlling what's in the header.
		testTable.setHeader(Arrays.asList("a", "b", "c", "d", "e"));
		db.rowsCheck("table1,dadadaasdfjh sdfhsdhgfaksdhgf<sasgf,>=,8090");
	}

	/**
	 * Test method for Database#rowsCheck(String).
	 *
	 * case: given column Header is not valid
	 * @throws NoSuchTableException if the table doesn't exist
	 * @throws ColumnIndexOutOfBoundsException  if the column does not exist
	 *
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testRowsCheck_InvalidTable() throws NoSuchTableException,
	ColumnIndexOutOfBoundsException {
		//controlling what's in the header.
		db.clear();
		//controlling what's in the database.
		db.add("test", testTable);
		db.rowsCheck("table1asdfdadadaasdfjsasgf,4,>=,8090");
	}

	/**
	 * Test method for Database#remove(java.lang.String). case:
	 * table specified by tableName exists.
	 */
	@Test
	public final void testRemove_ExistingTable() {
		assertEquals(testTable, db.remove("table1"));
	}

	/**
	 * Test method for Database#remove(java.lang.String). case:
	 * table specified by tableName doesn't exist.
	 */
	@Test
	public final void testRemove_InexistentTable() {
		org.junit.Assert.assertNull(db.remove("nonExistentTable-123154631651"));
	}

	/**
	 * Test method for Database#check(Table, Table, int, int).
	 *
	 * case: table specified by tableName doesn't exist.
	 * @throws ColumnIndexOutOfBoundsException if column index is out of bounds
	 */
	@Test
	public final void testCheckTableTableIntInt_trivialCase()
			throws ColumnIndexOutOfBoundsException {

		Table chkTest = new Table(Arrays.asList(
				false, true, false, true, true, false));
		Row tcr1 = new Row(Arrays.asList(new StringCell("phi"),
				new NumberCell(12),	new StringCell("darfasdth"),
				new NumberCell(12), new NumberCell(5),	new StringCell("app")));

		Row	tcr2 = new Row(Arrays.asList(new StringCell("pi"),
				new NumberCell(18),	new StringCell("deasath"),
				new NumberCell(120), new NumberCell(50),
				new StringCell("aas")));

		Row	tcr3 = new Row(Arrays.asList(new StringCell("phli"),
				new NumberCell(541), new StringCell("dorasdm"),
				new NumberCell(124),	new NumberCell(51),
				new StringCell("aasd")));

		chkTest.add(tcr1);
		chkTest.add(tcr2);
		chkTest.add(tcr3);


		Table chkTest2 = new Table(Arrays.asList(
				false, true, false, true, true, false));
		Row	tcr4 = new Row(Arrays.asList(new StringCell("phi"),
				new NumberCell(10),	new StringCell("darth"),
				new NumberCell(12), new NumberCell(5), new StringCell("app")));
		Row	tcr5 = new Row(Arrays.asList(new StringCell("pi"),
				new NumberCell(100), new StringCell("death"),
				new NumberCell(120), new NumberCell(50),
				new StringCell("aed")));
		Row	tcr6 = new Row(Arrays.asList(new StringCell("phli"),
				new NumberCell(1), new StringCell("dorm"),
				new NumberCell(124), new NumberCell(255),
				new StringCell("aasd")));
		chkTest2.add(tcr4);
		chkTest2.add(tcr5);
		chkTest2.add(tcr6);

		//check for a table where all items are referenced
		assertEquals(Arrays.asList(), db.check(chkTest, chkTest2, 3, 3));
		assertEquals(Arrays.asList(), db.check(chkTest, chkTest2, 0, 0));

		//check for a table where no items are referenced
		assertEquals(chkTest.getAllRows(), db.check(chkTest, chkTest2, 1, 1));
		assertEquals(chkTest.getAllRows(), db.check(chkTest, chkTest2, 2, 2));

		//check for a table where a few items are referenced
		assertEquals(Arrays.asList(tcr3), db.check(chkTest, chkTest2, 4, 4));
		assertEquals(Arrays.asList(tcr2), db.check(chkTest, chkTest2, 5, 5));
	}

	/**
	 * Test method for Database#check(Table, Table, int, int).
	 *
	 * case: given column number is out of bounds.
	 *
	 * @throws ColumnIndexOutOfBoundsException if column index is out of bounds
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testCheckTableTableIntInt_ColumnIndexOutOfBounds()
			throws ColumnIndexOutOfBoundsException {
		db.check(testTable, mixedTable, testTable.getColSize() + 1001010, 0);
	}

	/**
	 * Test method for Database#check(String).
	 *
	 * @throws ColumnIndexOutOfBoundsException if column index is out of bounds
	 * @throws NoSuchTableException if the table doesn't exist
	 */
	@Test
	public final void testCheckString_trivialCase()
			throws ColumnIndexOutOfBoundsException, NoSuchTableException {

		Table checkTest = new Table(Arrays.asList(
				false, true, false, true, true, false),
				Arrays.asList("Head", "Hi", "Ho", "Happy", "Hart", "Hipo"));
		Row tcr1 = new Row(Arrays.asList(new StringCell("phi"),
				new NumberCell(12),	new StringCell("darfasdth"),
				new NumberCell(12), new NumberCell(5),
				new StringCell("app")));

		Row	tcr2 = new Row(Arrays.asList(new StringCell("pi"),
				new NumberCell(18),	new StringCell("deasath"),
				new NumberCell(120), new NumberCell(50),
				new StringCell("aas")));

		Row	tcr3 = new Row(Arrays.asList(new StringCell("phli"),
				new NumberCell(541), new StringCell("dorasdm"),
				new NumberCell(124), new NumberCell(51),
				new StringCell("aasd")));
		checkTest.add(tcr1);
		checkTest.add(tcr2);
		checkTest.add(tcr3);


		Table checkTest2 = new Table(Arrays.asList(
				false, true, false, true, true, false),
				Arrays.asList("Lyre", "Lamb", "Last", "Lap", "Life", "Lipo"));

		Row	tcr4 = new Row(Arrays.asList(new StringCell("phi"),
				new NumberCell(10),	new StringCell("darth"),
				new NumberCell(12), new NumberCell(5),
				new StringCell("app")));
		Row	tcr5 = new Row(Arrays.asList(new StringCell("pi"),
				new NumberCell(100), new StringCell("death"),
				new NumberCell(120), new NumberCell(50),
				new StringCell("aed")));
		Row	tcr6 = new Row(Arrays.asList(new StringCell("phli"),
				new NumberCell(1), new StringCell("dorm"),
				new NumberCell(124), new NumberCell(255),
				new StringCell("aasd")));
		checkTest2.add(tcr4);
		checkTest2.add(tcr5);
		checkTest2.add(tcr6);

		db.clear();

		db.add("check1", checkTest);
		db.add("check2", checkTest2);

		//check for a table where all items are referenced
		db.check(new String[] {"check1(Happy)", "references", "check2(Lap)"});
		assertEquals("Yes: check1(Happy) references check2(Lap)\n",
				output.toString());

		output.reset(); //clear the output stream

		//try again with column Numbers
		db.check(new String[] {"check1(3)", "references", "check2(3)"});
		assertEquals("Yes: check1(3) references check2(3)\n",
				output.toString());

		output.reset(); //clear the output stream

		//check where there are un-referenced items
		db.check(new String[] {"check1(1)", " references ", "check2(1)"});
		assertFalse(("These rows in check1(1) do not reference check2(1):\n"
				+ checkTest).toString().equals(output.toString()));

		checkTest.removeHeader();
		assertEquals("These rows in check1(1) do not reference check2(1):\n"
				+ checkTest, output.toString());
	}

	/**
	 * Test method for Database#check(String).
	 *
	 * case: given column header is not there.
	 *
	 * @throws ColumnIndexOutOfBoundsException if column index is out of bounds
	 * @throws NoSuchTableException if the table doesn't exist
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public final void testCheckString_InvalidHeader()
			throws ColumnIndexOutOfBoundsException, NoSuchTableException {
		db.check(new String[] {"table1(asdasdfsdf) ", "references",
		" table1(asdasdad)"});
	}


	/**
	 * Test method for Database#check(String).
	 *
	 * case: given Table is not in database.
	 *
	 * @throws ColumnIndexOutOfBoundsException if column index is out of bounds
	 * @throws NoSuchTableException if the table doesn't exist
	 */
	@Test(expected = NoSuchTableException.class)
	public final void testCheckString_NoSuchTable()
			throws ColumnIndexOutOfBoundsException, NoSuchTableException {
		db.clear();
		db.check(new String[] {"sadfdfsdfasdf1(1001010) ", "references",
		" table1(0)"});
	}

	/**
	 * Test method for Database#stringArrayToIntList(Array, int).
	 *
	 * case: a string Array is inputted with a correct index.
	 *
	 */
	@Test
	public final void testStringArrayToIntList_ValidIndex() {
		String[] testArray = {"notaninteger", "7", "33", "0"};

		List<Integer> expectedList = new ArrayList<Integer>();
		expectedList.add(7);
		expectedList.add(33);
		expectedList.add(0);

		//Never check 0 index due to the way other methods using
		//stringArrayToIntList are coded
		assertEquals(expectedList, db.stringArrayToIntList(testArray, 1));
	}

	/**
	 * Test method for Database#stringArrayToIntList(Array, int).
	 *
	 * case: a string Array is inputted with an out of range index.
	 *
	 */
	@Test
	public final void testStringArrayToIntList_InvalidIndex() {
		String[] testArray = {"notaninteger", "7", "33", "0"};

		List<Integer> expectedList = new ArrayList<Integer>();

		//Index 5 is out of range so empty list must be returned
		assertEquals(expectedList, db.stringArrayToIntList(testArray, 5));
	}
}
