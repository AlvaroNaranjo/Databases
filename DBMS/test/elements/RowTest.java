/**
 *
 */
package elements;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import parser.ColumnIndexOutOfBoundsException;

/**
 * Test cases for Row.java
 *
 * @version 2-N1
 *
 * @author Prajjwal Bhandari
 * @author Hardarshan Kahlon
 * @author Ansar Butt
 * @author Alvaro Naranjo
 *
 */
public class RowTest extends Row {

	List<Cell> cellList1 = new ArrayList<Cell>();
	List<Cell> cellList2 = new ArrayList<Cell>();
	List<Cell> cellList3 = new ArrayList<Cell>();

	Row stringRow, intRow, mixedRow;

	/**
	 * @throws java.lang.Exception Autogenerated
	 */
	@Before
	public void setUp() throws Exception {
		cellList1.add(new StringCell("Foo"));
		cellList1.add(new StringCell("Bar"));
		stringRow = new Row(cellList1);

		cellList2.add(new NumberCell(0));
		cellList2.add(new NumberCell(1));
		intRow = new Row(cellList2);

		cellList3.add(new StringCell("Foo"));
		cellList3.add(new NumberCell(2));
		mixedRow = new Row(cellList3);
	}

	/**
	 * Test method for Row#Row(java.util.List).
	 */
	@Test
	public void testRowListOfCellOfQ() {
		//Test if constructing Row properly from list of Number and String Cells
		assertEquals(new Row(cellList3).getRow(), cellList3);
	}

	/**
	 * Test method for Row#hasDefinition(java.util.List).
	 * hasDefinition should return true for a Row that follows definition defn
	 */
	@Test
	public void testHasDefinition_AllValid() {
		//check Row following definition for Row of Number and String Cells
		List<Boolean> defn3 = new ArrayList<Boolean>(
				Arrays.asList(false, true));
		assertTrue(mixedRow.hasDefinition(defn3));
	}

	/**
	 * Test method for Row#hasDefinition(java.util.List).
	 * hasDefinition should return false for a Row
	 * with more columns than defined in defn.
	 */
	@Test
	public void testHasDefinition_MoreColumns() {
		//check Row does not follow definition due to more columns
		List<Boolean> defn = new ArrayList<Boolean>(Arrays.asList(false));
		assertFalse(mixedRow.hasDefinition(defn));
	}

	/**
	 * Test method for Row#hasDefinition(java.util.List).
	 * hasDefinition should return false for a Row with
	 * less columns than defined in defn.
	 */
	@Test
	public void testHasDefinition_LessColumns() {
		//check Row does not follow definition due to less columns
		List<Boolean> defn = new ArrayList<Boolean>(
				Arrays.asList(false, false, false));
		assertFalse(mixedRow.hasDefinition(defn));
	}


	/**
	 * Test method for Row#hasDefinition(java.util.List).
	 * hasDefinition should return false for a Row with Cells
	 * of different type than defined in defn.
	 */
	@Test
	public void testHasDefinition_DifferentTypes() {
		//Test if row does not follow definition because of type mismatch
		List<Boolean> defn = new ArrayList<Boolean>(Arrays.asList(true, false));
		assertFalse(mixedRow.hasDefinition(defn));
	}

	/**
	 * Test method for Row#add(String).
	 */
	@Test
	public void testAdd() {
		//Test if add properly adds NumberCell and StringCell objects to a Row
		Row currentRow = new Row();

		for (int i = 1; i <= 5; i++) {
			if (i % 2 == 1) { // check that it can add StringCells properly
				assertTrue(currentRow.add(new StringCell("" + i)));
			} else { // check that it can add NumberCells properly,
				assertTrue(currentRow.add(new NumberCell(i)));
			}
			// check that size is properly updated
			assertEquals(i, currentRow.size());
		}

		List<Cell> expectedRow = new ArrayList<Cell>(Arrays.asList(
				new StringCell("1"), new NumberCell(2),
				new StringCell("3"), new NumberCell(4), new StringCell("5")));

		// check that all elements were added properly
		assertEquals(expectedRow, currentRow.getRow());
	}

	/**
	 * Test method for Row#addAll(java.util.List).
	 */
	@Test
	public void testAddAllList() {
		Row currentRow = new Row();

		//Create a list of mixed Cell objects to add to currentRow
		ArrayList<Cell> cellList = new ArrayList<Cell>(
				Arrays.asList(new StringCell("A"), new NumberCell(45)));

		// check properly adding elements
		assertTrue(currentRow.addAll(cellList));

		// once all elements added check the method modified currentRow's row
		assertEquals(cellList, currentRow.getRow());

		// check that no elements were lost using size
		assertEquals(2, currentRow.size());
	}

	/**
	 * Test method for Row#addAll(parser.Row).
	 * Check addAllRow properly adds contents of otherRow to currentRow
	 */
	@Test
	public void testAddAllRow() {
		Row currentRow = new Row();
		Row otherRow = new Row();
		//Insert StringCell and NumberCell Objects into otherRow
		otherRow.addAll(new ArrayList<Cell>(Arrays.asList(
				new StringCell("A"), new NumberCell(0))));

		// check trivial case, adding elements
		assertTrue(currentRow.addAll(otherRow));

		// check that adding properly modified currentRow
		assertEquals(currentRow, otherRow);

		otherRow.add(new StringCell("pi"));

		// check that addition did not pass by reference
		assertFalse(otherRow.equals(currentRow));
	}

	/**
	 * Test method for Row#changeCell(int, String).
	 *
	 * @throws ColumnIndexOutOfBoundsException if one of the cell is out of
	 * bounds
	 */
	@Test
	public void testChangeCell() throws ColumnIndexOutOfBoundsException {

		// Change a StringCell.
		assertEquals(stringRow.getCell(1),
					stringRow.changeCell(1, new StringCell("Burrito")));

		// Change a NumberCell.
		assertEquals(intRow.getCell(1),
					intRow.changeCell(1, new NumberCell(52)));

		// Check changeCell properly changed stringRow
		assertEquals(new StringCell("Burrito"), stringRow.getRow().get(1));

		// Check changeCell properly changed intRow
		assertEquals(new NumberCell(52), intRow.getRow().get(1));
	}

	/**
	 * Test method for Row#equals(java.lang.Object).
	 */
	@Test
	public void testEqualsObject() {
		// check if an element is equal to itself
		assertTrue(mixedRow.equals(mixedRow));

		// check that a row is equal to another row with all the same elements
		assertTrue(mixedRow.equals(new Row(cellList3)));

		// check that a row is not equal to another row with different elements
		//alvaro changed added this test case
		assertFalse(mixedRow.equals(intRow));

		// check that a non row is not equal to a non row object
		assertFalse(mixedRow.equals("string"));

		// check comparing to null returns false without any error
		assertFalse(mixedRow.equals(null));

		// check comparing to empty Row returns false without any error
		assertFalse(mixedRow.equals(new Row()));
	}

	/**
	 * Test method for Row#toString().
	 */
	@Test
	public void testToString() {
		// check toString works for cells of different types
		assertEquals("Foo,2", mixedRow.toString());

		// check the empty string is produced for the empty row
		assertEquals("", (new Row()).toString());
	}

	/**
	 * Test method for Row#getCell(int).
	 *
	 * @throws ColumnIndexOutOfBoundsException if the cell index is out of
	 * bounds
	 */
	@Test
	public void testGetCell() throws ColumnIndexOutOfBoundsException {
		// check getting a StringCell
		assertEquals(new StringCell("Foo"), mixedRow.getCell(0));

		// check getting a NumberCell
		assertEquals(new NumberCell(2), mixedRow.getCell(1));
	}

	/**
	 * Test method for Row#getCell(int).
	 *
	 * @throws ColumnIndexOutOfBoundsException if the cell index is out of
	 * bounds
	 */
	@Test(expected = ColumnIndexOutOfBoundsException.class)
	public void testGetCellIndexOutOfBounds()
			throws ColumnIndexOutOfBoundsException {
		// check exception is thrown when getting at index out of bounds
		mixedRow.getCell(99999);

		// check exception is thrown when getting item from empty Row
		(new Row()).getCell(0);
	}

	/**
	 * Test method for Row#size().
	 */
	@Test
	public void testSize() {
		// check properly getting the size of a row
		assertEquals(2, mixedRow.size());

		// check properly getting the size of the empty row
		assertEquals(0, (new Row()).size());
	}

	/**
	 * Test method for Row#clear().
	 */
	@Test
	public void testClear() {
		// check properly clearing Row of mixed cells
		mixedRow.clear();
		assertEquals(0, mixedRow.size());
	}
}
